{"version":3,"sources":["components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["Heading","text","arc","radius","characters","split","degree","length","map","char","i","key","style","height","transform","transformOrigin","App","dateTarget","moment","state","diffs","getDateDiffs","isNowLaterThanDateTarget","this","updateDiffs","days","minutes","hours","seconds","className","format","Math","round","abs","toDate","Date","now","tomorrow","setDate","getDate","setHours","nextHourDate","getHours","setMinutes","nextMinuteDate","getMinutes","setSeconds","setTimeout","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAuBeA,MArBf,YAAyC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OACtBC,EAAaH,EAAKI,MAAM,IACxBC,EAASJ,EAAME,EAAWG,OAEhC,OACE,4BACGH,EAAWI,KAAI,SAACC,EAAMC,GAAP,OACd,0BACEC,IAAG,uBAAkBD,GACrBE,MAAO,CACLC,OAAO,GAAD,OAAKV,EAAL,MACNW,UAAU,UAAD,OAAYR,EAASI,EAAIR,EAAM,EAA/B,QACTa,gBAAgB,KAAD,OAAOZ,EAAP,UAEhBM,QCwFIO,E,4MA7FXC,WAAaC,IAAO,c,EAEpBC,MAAQ,CACJC,MAAO,EAAKC,eACZC,0BAA0B,G,kEAI1BC,KAAKC,gB,+BAGC,IAAD,EAMDD,KAAKJ,MAAMC,MAJXK,EAFC,EAEDA,KACAC,EAHC,EAGDA,QACAC,EAJC,EAIDA,MACAC,EALC,EAKDA,QAGJ,OACI,yBACIC,UAAY,aAEZ,mDACyBN,KAAKN,WAAWa,OAAO,iBAGhD,wBACID,UAAY,4BADhB,sBAMA,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAS5B,KAAK,cAAcC,IAAK,GAAIC,OAAQ,OAGjD,uBACI0B,UAAY,sBAGRN,KAAKJ,MAAMG,yBACP,sBADJ,UAGOG,EAHP,kBAGqBE,EAHrB,mBAGqCD,EAHrC,qBAGyDE,EAHzD,gB,qCAWhB,IAAMH,EAAOM,KAAKC,MAAMD,KAAKE,KAAKV,KAAKN,WAAWiB,SAAWC,KAAKC,OAvD3D,QAyDDC,EAAW,IAAIF,KAErBE,EAASC,QAAQD,EAASE,UAAY,GACtCF,EAASG,SAAS,EAAE,EAAE,EAAE,GAExB,IAAMb,EAAQI,KAAKC,MAAMD,KAAKE,KAAKI,EAAWF,KAAKC,OA/D3C,OAiEFK,EAAe,IAAIN,KACzBM,EAAaD,SAASC,EAAaC,WAAa,GAChDD,EAAaE,WAAW,GAExB,IAAMjB,EAAUK,KAAKC,MAAMD,KAAKE,KAAKQ,EAAeN,KAAKC,OAtE/C,MAsEsE,EAE1EQ,EAAiB,IAAIT,KAM3B,OALAS,EAAeD,WAAWC,EAAeC,aAAe,GACxDD,EAAeE,WAAW,GAInB,CACHrB,OACAE,QACAD,UACAE,QANYG,KAAKC,MAAMD,KAAKE,KAAKW,EAAiBT,KAAKC,OA7EjD,S,oCAuFC,IAAD,OACVW,YAAW,WACP,EAAKC,SAAS,CACV5B,MAAO,EAAKC,eACZC,yBAA0B,EAAKL,WAAWiB,SAAW,IAAIC,OAG7D,EAAKX,gBACN,S,GA1FOyB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e065320.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Heading({ text, arc, radius }) {\n  const characters = text.split('');\n  const degree = arc / characters.length;\n\n  return (\n    <h1>\n      {characters.map((char, i) => (\n        <span\n          key={`heading-span-${i}`}\n          style={{\n            height: `${radius}px`,\n            transform: `rotate(${degree * i - arc / 2}deg)`,\n            transformOrigin: `0 ${radius}px 0`,\n          }}>\n          {char}\n        </span>\n      ))}\n    </h1>\n  );\n}\n\nexport default Heading","import React from 'react'\n\nimport moment from 'moment'\nimport Heading from './components/Heading'\n\nconst oneSecond = 1000\nconst oneMinute = 60 * oneSecond\nconst oneHour = 60 * oneMinute\nconst oneDay = 24 * oneHour\n\nclass App extends React.Component {\n    dateTarget = moment('2020-04-10')\n\n    state = {\n        diffs: this.getDateDiffs(),\n        isNowLaterThanDateTarget: false\n    }\n\n    componentDidMount() {\n        this.updateDiffs()\n    }\n\n    render() {\n        const {\n            days,\n            minutes,\n            hours,\n            seconds\n        } = this.state.diffs\n\n        return (\n            <div\n                className = 'container'\n            >\n                <h3>\n                    The Date Target Is: {this.dateTarget.format('DD MMMM YYYY')}\n                </h3>\n\n                <h1\n                    className = 'time-left-from-now-title'\n                >\n                    Time Left From Now\n                </h1>\n\n                <div className=\"wrapper\">\n                    <Heading text=\"Hallo ridho\" arc={90} radius={300} />\n                </div>\n\n                <p\n                    className = 'time-left-from-now'\n                >\n                    {\n                        this.state.isNowLaterThanDateTarget ?\n                            \"The event has begun\"\n                            :\n                            `${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds`\n                    }\n                </p>\n            </div>\n        )\n    }\n\n    getDateDiffs() {\n        const days = Math.round(Math.abs((this.dateTarget.toDate() - Date.now()) / oneDay))\n        \n        const tomorrow = new Date()\n\n        tomorrow.setDate(tomorrow.getDate() + 1)\n        tomorrow.setHours(0,0,0,0)\n\n        const hours = Math.round(Math.abs((tomorrow - Date.now()) / oneHour))\n\n        const nextHourDate = new Date()\n        nextHourDate.setHours(nextHourDate.getHours() + 1)\n        nextHourDate.setMinutes(0)\n\n        const minutes = Math.round(Math.abs((nextHourDate - Date.now()) / oneMinute)) - 1\n\n        const nextMinuteDate = new Date()\n        nextMinuteDate.setMinutes(nextMinuteDate.getMinutes() + 1)\n        nextMinuteDate.setSeconds(0)\n        \n        const seconds = Math.round(Math.abs((nextMinuteDate - Date.now()) / oneSecond))\n\n        return {\n            days,\n            hours,\n            minutes,\n            seconds\n        }\n    }\n\n    updateDiffs() {\n        setTimeout(() => {\n            this.setState({\n                diffs: this.getDateDiffs(),\n                isNowLaterThanDateTarget: this.dateTarget.toDate() < new Date()\n            })\n\n            this.updateDiffs()\n        }, 250)\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}